version: 2.1

jobs:
  build:
    docker:
      - image: cimg/openjdk:17.0.11
    steps:
      - checkout
      - run:
          name: Grant execute permission to gradlew
          command: chmod +x ./gradlew
      - run:
          name: Build with Gradle
          command: ./gradlew build
      - persist_to_workspace:
          root: .
          paths:
            - .

  docker-build-deploy:
    docker:
      - image: cimg/base:current
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: default
      - run:
          name: Docker Login
          command: |
            echo "$DOCKERHUB_TOKEN" | docker login -u $DOCKERHUB_USERNAME --password-stdin
      - run:
          name: Build Docker image
          command: |
            docker build --file docker/Dockerfile --tag $DOCKERHUB_USERNAME/$DOCKER_IMAGE_TAG_NAME:latest .
      - run:
          name: Push Docker image
          command: |
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_TAG_NAME:latest

  deploy:
    docker:
      - image: cimg/base:current
    steps:
      - add_ssh_keys:
          fingerprints:
            - "본인의 fingerprint"
      - run:
          name: Deploy Over SSH
          command: |
            ssh -o StrictHostKeyChecking=no ubuntu@$SSH_HOST \
              "CONTAINER_ID=\$(sudo docker ps -q --filter 'publish=8080-8080')

              if [ ! -z \"\$CONTAINER_ID\" ]; then
                sudo docker stop \$CONTAINER_ID
                sudo docker rm \$CONTAINER_ID
              fi
            
              echo "$DOCKERHUB_TOKEN" | docker login -u $DOCKERHUB_USERNAME --password-stdin

              sudo docker pull $DOCKERHUB_USERNAME/$DOCKER_IMAGE_TAG_NAME:latest
            
            
              sudo docker run -d -p 8080:8080 \
                -e DB_USERNAME=$DB_USERNAME \
                -e DB_PASSWORD=$DB_PASSWORD \
                -e DB_URL=$DB_URL \
                $DOCKERHUB_USERNAME/$DOCKER_IMAGE_TAG_NAME:latest"

workflows:
  build_and_push:
    jobs:
      - build
      - docker-build-deploy:
          requires:
            - build
          filters:
            branches:
              only: main
      - deploy:
          requires:
            - docker-build-deploy

